name: CI

on:
  push:
    branches:
      - master
env:
  NEW_FILENAME: "lambda_function.py"

jobs:
  job2:
    runs-on: ubuntu-latest  # windows-latest | macos-latest
    name: Test changed-files
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # OR "2" -> To retrieve the preceding commit.


      # Example 1
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v37


      - name: 配置AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # NOTE: `since_last_remote_commit: true` is implied by default and falls back to the previous local commit.

      - name: 所有改变的文件
        run: |
          echo "Actor: ${{ toJson(steps) }}"
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done
      - name: all_modified_files的文件
        run: |
            for file in ${{ steps.changed-files.outputs.all_modified_files }}; do
                echo "$file" >> origin_all_modified_files.txt
                filename=$(basename "$file")
                echo "$filename" >> abs_all_modified_files.txt
                if [[ $filename == *.py ]]; then
                  echo "The file $filename is in .py format."

                else
                  echo "The file $filename is not in .py format."
                fi
            done
            cat origin_all_modified_files.txt
            echo "------"
            cat abs_all_modified_files.txt
      - name: 只下载更新的文件
        uses: actions/checkout@v3
        with:
          sparse-checkout: |
            origin_all_modified_files.txt
          sparse-checkout-cone-mode: false

      - name: 读取 origin_all_modified_files.txt 并下载文件
        run: |
          cat origin_all_modified_files.txt | while read -r file; do
            git sparse-checkout set "$file"
          done
          ls

      - name: deleted_files的文件
        run: |
            for file in ${{ steps.changed-files.outputs.deleted_files }}; do
                echo "$file" >> origin_deleted_files.txt
                filename=$(basename "$file")
                echo "$filename" >> abs_deleted_files.txt
            done
            cat origin_deleted_files.txt
            echo "------"
            cat abs_deleted_files.txt


      - name: Check Lambda function existence and update/create if needed
        id: check-functions
        run: |
          # Define the list of Lambda functions to check
          functions=("Function1" "Function2" "Function3")

          # Loop through the functions and check existence
          for function in "${functions[@]}"
          do
            response=$(aws lambda get-function --function-name "$function" --output json)
            if [[ "${response}" == *"FunctionNotFound"* ]]; then
              echo "::set-output name=${function}_exists::false"
            else
              echo "::set-output name=${function}_exists::true"
            fi
          done

      - name: Create or update Lambda functions
        run: |
          # Loop through the functions and create/update as necessary
          functions=("Function1" "Function2" "Function3")
          for function in "${functions[@]}"
          do
            exists="${{ steps.check-functions.outputs.${function}_exists }}"
            if [[ "$exists" == 'false' ]]; then
              # Create the Lambda function
              echo "Creating $function"
              # Add the create-function command here with the appropriate parameters
            else
              # Update the Lambda function code
              echo "Updating $function"
              # Add the update-function-code command here with the appropriate parameters
            fi
          done    

